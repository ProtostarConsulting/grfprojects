package com.protostar.prostudy.gf.service;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.protostar.prostudy.entity.Address;
import com.protostar.prostudy.gf.entity.BookDetail;
import com.protostar.prostudy.gf.entity.BookSummary;
import com.protostar.prostudy.gf.entity.ExamDetail;
import com.protostar.prostudy.gf.entity.GFBookEntity;
import com.protostar.prostudy.gf.entity.PartnerSchoolEntity;

public class DownloadBookDetailsReport extends HttpServlet {
	private static final long serialVersionUID = 1L;

	public DownloadBookDetailsReport() {
		super();
		// TODO Auto-generated constructor stub
	}

	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		if (request.getRemoteHost().contains("localhost")
				|| request.getRemoteHost().contains("127.0.0.1")) {
			response.addHeader("Access-Control-Allow-Origin", "*");
			response.addHeader("Access-Control-Allow-Methods",
					"GET,PUT,POST,DELETE");
			response.addHeader("Access-Control-Allow-Headers", "Content-Type");
		}

		Long schoolId = Long.parseLong(request.getParameter("schoolId"));
		String yearOfExam = request.getParameter("yearOfExam");
		Integer totalStudent = 0, totalBookAmount = 0, totalGRFFees = 0, bookAmt20per = 0, bookAmt80per = 0, examAmt20per = 0, examAmt80per = 0;

		Date date = new Date();
		String DATE_FORMAT = "dd/MMM/yyyy";
		SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);

		PartnerSchoolService pschoolService = new PartnerSchoolService();
		PartnerSchoolEntity schoolEntity = pschoolService
				.getPSchoolByPSID(schoolId);

		try {

			response.setContentType("text/csv");

			response.setHeader(
					"Content-Disposition",
					"attachment; filename=BookDetailsReport_"
							+ sdf.format(date) + ".csv");
			
			ServletOutputStream outputStream = response.getOutputStream();
			OutputStreamWriter writer = new OutputStreamWriter(outputStream);
			
			writer.append("Reg. No.");
			writer.append(',');
			writer.append(schoolEntity.getAutoGenerated());
			writer.append(',');
			writer.append(System.lineSeparator());
			
			writer.append("School Name");
			writer.append(',');
			writer.append(schoolEntity.getSchoolName());
			writer.append(',');
			writer.append(System.lineSeparator());
			
			writer.append("Address");
			writer.append(',');
			Address address = schoolEntity.getAddress();
			writer.append("At."+address.getCity());
			writer.append(',');
			writer.append(System.lineSeparator());
			
			writer.append("Standard");
			writer.append(',');
			writer.append("Book Name");
			writer.append(',');
			writer.append("Qty.");
			writer.append(',');
			writer.append("Book Price");
			writer.append(',');
			writer.append("Book Amount");
			writer.append(',');
			writer.append("Exam Fees");
			writer.append(',');
			writer.append("GRF Total");
			writer.append(',');

			writer.append(System.lineSeparator());

			List<ExamDetail> examDetailList = schoolEntity.getExamDetailList();
			for (int j = 0; j < examDetailList.size(); j++) {
				if (examDetailList != null
						&& examDetailList.size() > 0
						&& examDetailList.get(j).getYearOfExam().trim()
								.equalsIgnoreCase(yearOfExam.trim())) {
					
					BookSummary bookSummary = examDetailList.get(j)
							.getBookSummary();
					if (bookSummary != null) {
						
						List<BookDetail> bookDetail = bookSummary
								.getBookDetail();
						if (bookDetail != null && bookDetail.size() > 0) {
							for (BookDetail book : bookDetail) {
								if (book.getBookName() != null) {
									
									GFBookStockService bookService = new GFBookStockService();
									GFBookEntity bookEntity = bookService
											.getGFBookById(Long.parseLong(book
													.getBookName().trim()));
									writer.append(book.getStandard());
									writer.append(',');
									String bookName = " "+ "("+ bookEntity.getStandard()+ '-'+ bookEntity.getBookMedium()+ ")";
									writer.append(bookEntity.getBookName()
											.concat(bookName));
									writer.append(',');
									totalStudent += book.getTotalStud();
									writer.append(book.getTotalStud()
											.toString());
									writer.append(',');
									writer.append(book.getBookPrise()
											.toString());
									writer.append(',');
									totalBookAmount += book.getTotalFees();
									writer.append(book.getTotalFees()
											.toString());
									writer.append(',');
									writer.append(book.getExamFees().toString());
									writer.append(',');
									totalGRFFees += book.getTotalExamFees();
									writer.append(book.getTotalExamFees()
											.toString());
									writer.append(',');
									writer.append(System.lineSeparator());
								}
							}
						}
					}
				}
			}

			bookAmt20per += ((totalBookAmount / 100) * 20);
			bookAmt80per += ((totalBookAmount / 100) * 80);
			
			examAmt20per += ((totalGRFFees / 100) * 20);
			examAmt80per += ((totalGRFFees / 100) * 80);

			writer.append(',');
			writer.append("Total A");
			writer.append(',');
			writer.append(totalStudent.toString());
			writer.append(',');
			writer.append(',');
			writer.append(totalBookAmount.toString());
			writer.append(',');
			writer.append(',');
			writer.append(totalGRFFees.toString());
			writer.append(',');
			writer.append(System.lineSeparator());

			writer.append(',');
			writer.append(',');
			writer.append(',');
			writer.append(',');
			writer.append(totalBookAmount.toString());
			writer.append(',');
			writer.append(',');
			writer.append(',');
			writer.append(System.lineSeparator());

			writer.append(',');
			writer.append("20% Expensess");
			writer.append(',');
			writer.append(',');
			writer.append(',');
			writer.append(bookAmt20per.toString());
			writer.append(',');
			writer.append(',');
			writer.append(examAmt20per.toString());
			writer.append(System.lineSeparator());

			writer.append(',');
			writer.append("Grand Total");
			writer.append(',');
			writer.append(',');
			writer.append(',');
			writer.append(bookAmt80per.toString());
			writer.append(',');
			writer.append(',');
			writer.append(examAmt80per.toString());
			writer.append(System.lineSeparator());

			writer.close();

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
	}

}
