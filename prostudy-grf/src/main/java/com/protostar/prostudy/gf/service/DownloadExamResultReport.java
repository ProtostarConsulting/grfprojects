package com.protostar.prostudy.gf.service;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.protostar.prostudy.gf.entity.GFExamResultEntity;
import com.protostar.prostudy.gf.entity.PartnerSchoolEntity;
import com.protostar.prostudy.until.data.EntityPagingInfo;

/**
 * Servlet implementation class DownloadExamResultReport
 */
public class DownloadExamResultReport extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public DownloadExamResultReport() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub

		String InstituteId = request.getParameter("InstituteId");
		Long insId = Long.parseLong(InstituteId);
		String yearofExam = request.getParameter("yearofExam");
		String resultFlag = request.getParameter("pendingResult");
		boolean pendingResult = Boolean.parseBoolean(resultFlag) ? Boolean.parseBoolean(resultFlag) : false;

		String DATE_FORMAT = "dd-MM-yyyy";
		SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
		sdf.setTimeZone(TimeZone.getTimeZone("IST"));

		GFStudentService gfStudentServices = new GFStudentService();

		//EntityPagingInfo paginInfo = new EntityPagingInfo();
		List<GFExamResultEntity> gfExamResultDataList = new ArrayList<GFExamResultEntity>();

		/*if (!pendingResult) {
			paginInfo = gfStudentServices.fetchExamResultByPaging(insId, yearofExam, paginInfo);
		} else {
			paginInfo = gfStudentServices.fetchExamResultPendingByPaging(insId, yearofExam, paginInfo);
		}

		if (paginInfo.getEntityList() != null) {
			gfExamResultDataList = paginInfo.getEntityList();
		}*/
		gfExamResultDataList = gfStudentServices.getPendingExamResultList(insId, yearofExam, pendingResult);
		
		try {

			response.setContentType("text/csv");
			if (!pendingResult) {
				response.setHeader("Content-Disposition",
						"attachment; filename=ExamResultCSVData_" + sdf.format(new Date()) + ".csv");
			} else {
				response.setHeader("Content-Disposition",
						"attachment; filename=PendingExamResultCSV_Data_" + sdf.format(new Date()) + ".csv");
			}

			ServletOutputStream outputStream = response.getOutputStream();
			OutputStreamWriter writer = new OutputStreamWriter(outputStream);

			writer.append("GRF.Reg.no");
			writer.append(',');
			writer.append("School Name");
			writer.append(',');
			writer.append("City");
			writer.append(',');
			writer.append("District");
			writer.append(',');
			writer.append("State");
			writer.append(',');
			writer.append("Coordinator Name");
			writer.append(',');
			writer.append("Coordinator Number");
			writer.append(',');

			writer.append(System.lineSeparator());

			for (int i = 0; i < gfExamResultDataList.size(); i++) {

				GFExamResultEntity examResultEntity = gfExamResultDataList.get(i);
				PartnerSchoolEntity school = examResultEntity.getSchool();

				String grfRegNo = school.getAutoGenerated();
				writer.append(grfRegNo);
				writer.append(',');
				String schoolName = school.getSchoolName();
				writer.append(schoolName);
				writer.append(',');
				String city = school.getAddress().getCity();
				writer.append(city);
				writer.append(',');
				String district = school.getAddress().getDist();
				writer.append(district);
				writer.append(',');
				String state = school.getAddress().getState();
				writer.append(state);
				writer.append(',');

				if (school.getContactDetail().getCoordinatorDetail() != null) {
					String coordinatorName = school.getContactDetail().getCoordinatorDetail().get(0)
							.getCoordinatorName();
					writer.append(coordinatorName);
					writer.append(',');
					String coordinatorNumber = school.getContactDetail().getCoordinatorDetail().get(0)
							.getCoordinatorMobileNum();
					writer.append(coordinatorNumber);
					writer.append(',');
				}

				writer.append(System.lineSeparator());

			}

			writer.close();

		} catch (Exception e) {
			// TODO: handle exception
			throw new ServletException("Exception in Excel Sample Servlet", e);
		}

	}

}
