<?xml version="1.0" encoding="utf-8"?>
<appengine-web-app xmlns="http://appengine.google.com/ns/1.0">
	<application>grf-prod</application>
	
	<version>1</version>

	<runtime>java8</runtime>
	<url-stream-handler>urlfetch</url-stream-handler>
	<!-- Allows App Engine to send multiple requests to one instance in parallel: -->
	<threadsafe>true</threadsafe>

	<instance-class>F2</instance-class>
	<!-- <instance-class>F4_1G</instance-class> -->
	<automatic-scaling>
		<min-idle-instances>0</min-idle-instances>
		<max-idle-instances>10</max-idle-instances>
		<min-pending-latency>5000ms</min-pending-latency>
		<max-pending-latency>automatic</max-pending-latency>
		<max-concurrent-requests>60</max-concurrent-requests>
	</automatic-scaling>

	<!--<instance-class>B2</instance-class> <basic-scaling> <max-instances>2</max-instances> 
		<max-instances>4</max-instances> <max-instances>8</max-instances> <idle-timeout>10m</idle-timeout> 
		</basic-scaling> -->

	<!-- <instance-class>B1</instance-class> <manual-scaling> <instances>1</instances> 
		</manual-scaling> -->

	<!-- Configure java.util.logging -->
	<system-properties>
		<property name="java.util.logging.config.file" value="WEB-INF/logging.properties" />
	</system-properties>

	<!-- <inbound-services> <service>warmup</service> </inbound-services> <warmup-requests-enabled>true</warmup-requests-enabled> -->

	<!-- HTTP Sessions are disabled by default. To enable HTTP sessions specify: 
		<sessions-enabled>true</sessions-enabled> It's possible to reduce request 
		latency by configuring your application to asynchronously write HTTP session 
		data to the datastore: <async-session-persistence enabled="true" /> With 
		this feature enabled, there is a very small chance your app will see stale 
		session data. For details, see http://code.google.com/appengine/docs/java/config/appconfig.html#Enabling_Sessions -->
</appengine-web-app>
